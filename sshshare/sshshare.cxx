// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "sshshare.hxx"

// shares_t
// 

const shares_t::share_sequence& shares_t::
share () const
{
  return this->share_;
}

shares_t::share_sequence& shares_t::
share ()
{
  return this->share_;
}

void shares_t::
share (const share_sequence& s)
{
  this->share_ = s;
}


// share_t
// 

const share_t::name_type& share_t::
name () const
{
  return this->name_.get ();
}

share_t::name_type& share_t::
name ()
{
  return this->name_.get ();
}

void share_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void share_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const share_t::description_optional& share_t::
description () const
{
  return this->description_;
}

share_t::description_optional& share_t::
description ()
{
  return this->description_;
}

void share_t::
description (const description_type& x)
{
  this->description_.set (x);
}

void share_t::
description (const description_optional& x)
{
  this->description_ = x;
}

void share_t::
description (::std::auto_ptr< description_type > x)
{
  this->description_.set (x);
}

const share_t::users_type& share_t::
users () const
{
  return this->users_.get ();
}

share_t::users_type& share_t::
users ()
{
  return this->users_.get ();
}

void share_t::
users (const users_type& x)
{
  this->users_.set (x);
}

void share_t::
users (::std::auto_ptr< users_type > x)
{
  this->users_.set (x);
}


// users_t
// 

const users_t::user_sequence& users_t::
user () const
{
  return this->user_;
}

users_t::user_sequence& users_t::
user ()
{
  return this->user_;
}

void users_t::
user (const user_sequence& s)
{
  this->user_ = s;
}


// user_t
// 

const user_t::name_type& user_t::
name () const
{
  return this->name_.get ();
}

user_t::name_type& user_t::
name ()
{
  return this->name_.get ();
}

void user_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void user_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const user_t::password_type& user_t::
password () const
{
  return this->password_.get ();
}

user_t::password_type& user_t::
password ()
{
  return this->password_.get ();
}

void user_t::
password (const password_type& x)
{
  this->password_.set (x);
}

void user_t::
password (::std::auto_ptr< password_type > x)
{
  this->password_.set (x);
}


// FilePath
// 


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// shares_t
//

shares_t::
shares_t ()
: ::xml_schema::type (),
  share_ (::xml_schema::flags (), this)
{
}

shares_t::
shares_t (const shares_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  share_ (x.share_, f, this)
{
}

shares_t::
shares_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  share_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void shares_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // share
    //
    if (n.name () == "share" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< share_type > r (
        share_traits::create (i, f, this));

      this->share_.push_back (r);
      continue;
    }

    break;
  }
}

shares_t* shares_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class shares_t (*this, f, c);
}

shares_t::
~shares_t ()
{
}

// share_t
//

share_t::
share_t (const name_type& name,
         const users_type& users)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  description_ (::xml_schema::flags (), this),
  users_ (users, ::xml_schema::flags (), this)
{
}

share_t::
share_t (const name_type& name,
         ::std::auto_ptr< users_type >& users)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  description_ (::xml_schema::flags (), this),
  users_ (users, ::xml_schema::flags (), this)
{
}

share_t::
share_t (const share_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  description_ (x.description_, f, this),
  users_ (x.users_, f, this)
{
}

share_t::
share_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  description_ (f, this),
  users_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void share_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (r);
        continue;
      }
    }

    // description
    //
    if (n.name () == "description" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< description_type > r (
        description_traits::create (i, f, this));

      if (!this->description_)
      {
        this->description_.set (r);
        continue;
      }
    }

    // users
    //
    if (n.name () == "users" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< users_type > r (
        users_traits::create (i, f, this));

      if (!users_.present ())
      {
        this->users_.set (r);
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!users_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "users",
      "");
  }
}

share_t* share_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class share_t (*this, f, c);
}

share_t::
~share_t ()
{
}

// users_t
//

users_t::
users_t ()
: ::xml_schema::type (),
  user_ (::xml_schema::flags (), this)
{
}

users_t::
users_t (const users_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  user_ (x.user_, f, this)
{
}

users_t::
users_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  user_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void users_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // user
    //
    if (n.name () == "user" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_type > r (
        user_traits::create (i, f, this));

      this->user_.push_back (r);
      continue;
    }

    break;
  }
}

users_t* users_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class users_t (*this, f, c);
}

users_t::
~users_t ()
{
}

// user_t
//

user_t::
user_t (const name_type& name,
        const password_type& password)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  password_ (password, ::xml_schema::flags (), this)
{
}

user_t::
user_t (const user_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  password_ (x.password_, f, this)
{
}

user_t::
user_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  password_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void user_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (r);
        continue;
      }
    }

    // password
    //
    if (n.name () == "password" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< password_type > r (
        password_traits::create (i, f, this));

      if (!password_.present ())
      {
        this->password_.set (r);
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!password_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "password",
      "");
  }
}

user_t* user_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class user_t (*this, f, c);
}

user_t::
~user_t ()
{
}

// FilePath
//

FilePath::
FilePath ()
: ::xml_schema::string ()
{
}

FilePath::
FilePath (const char* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

FilePath::
FilePath (const ::std::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

FilePath::
FilePath (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

FilePath::
FilePath (const FilePath& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

FilePath::
FilePath (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
}

FilePath::
FilePath (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
}

FilePath::
FilePath (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
}

FilePath* FilePath::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class FilePath (*this, f, c);
}

FilePath::
~FilePath ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::shares_t >
shares (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::shares_t > r (
    ::shares (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::shares_t >
shares (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::shares_t > r (
    ::shares (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::shares_t >
shares (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::shares_t > r (
    ::shares (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::shares_t >
shares (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::shares (isrc, f, p);
}

::std::auto_ptr< ::shares_t >
shares (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::shares (isrc, h, f, p);
}

::std::auto_ptr< ::shares_t >
shares (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::shares (isrc, h, f, p);
}

::std::auto_ptr< ::shares_t >
shares (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::shares (isrc, f, p);
}

::std::auto_ptr< ::shares_t >
shares (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::shares (isrc, h, f, p);
}

::std::auto_ptr< ::shares_t >
shares (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::shares (isrc, h, f, p);
}

::std::auto_ptr< ::shares_t >
shares (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::shares_t > r (
    ::shares (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::shares_t >
shares (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::shares_t > r (
    ::shares (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::shares_t >
shares (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::shares_t > r (
    ::shares (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::shares_t >
shares (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::shares_t > r (
      ::shares (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "shares" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::shares_t > r (
      ::xsd::cxx::tree::traits< ::shares_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "shares",
    "");
}

::std::auto_ptr< ::shares_t >
shares (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "shares" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::shares_t > r (
      ::xsd::cxx::tree::traits< ::shares_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "shares",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
shares (::std::ostream& o,
        const ::shares_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::shares (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
shares (::std::ostream& o,
        const ::shares_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::shares (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
shares (::std::ostream& o,
        const ::shares_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::shares (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
shares (::xercesc::XMLFormatTarget& t,
        const ::shares_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::shares (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
shares (::xercesc::XMLFormatTarget& t,
        const ::shares_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::shares (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
shares (::xercesc::XMLFormatTarget& t,
        const ::shares_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::shares (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
shares (::xercesc::DOMDocument& d,
        const ::shares_t& s,
        ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "shares" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "shares",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
shares (const ::shares_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "shares",
      "",
      m, f));

  ::shares (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const shares_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // share
  //
  for (shares_t::share_const_iterator
       b (i.share ().begin ()), n (i.share ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "share",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const share_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "name",
        e));

    s << i.name ();
  }

  // description
  //
  if (i.description ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "description",
        e));

    s << *i.description ();
  }

  // users
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "users",
        e));

    s << i.users ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const users_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // user
  //
  for (users_t::user_const_iterator
       b (i.user ().begin ()), n (i.user ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "user",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const user_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "name",
        e));

    s << i.name ();
  }

  // password
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "password",
        e));

    s << i.password ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const FilePath& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const FilePath& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const FilePath& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

